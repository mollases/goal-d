# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: goald # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  versionFunctions: false

# you can overwrite defaults here
  stage: dev
  region: us-west-2

  # iamRoleStatements:
  #   - Effect: "Allow"
  #     Action:
  #       - "s3:ListBucket"
  #     Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
  #   - Effect: "Allow"
  #     Action:
  #       - "s3:PutObject"
  #     Resource:
  #       Fn::Join:
  #         - ""
  #         - - "arn:aws:s3:::"
  #           - "Ref" : "ServerlessDeploymentBucket"
  #           - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
#  include:
#    - public/**
  exclude:
    - clients/redis.js
    - clients/rddb.js
#    - src/**
#    - public/**

functions:
  getUserDetails:
    handler: serve.getUserDetails
    events:
      - http:
          path: '/user-details/{id}'
          method: get

  postUserDetails:
    handler: serve.postUserDetails
    events:
      - http:
          path: '/user-details/{id}'
          method: post

  getUserTopic:
    handler: serve.getUserTopic
    events:
      - http:
          path: '/user-details/{id}/topic/{topic}'
          method: get

  postUserTopic:
    handler: serve.postUserTopic
    events:
      - http:
          path: '/user-details/{id}/topic/{topic}'
          method: post

  getUserTopicPost:
    handler: serve.getUserTopicPost
    events:
      - http:
          path: '/user-details/{id}/topic/{topic}/post/{post}/extra/{extra}'
          method: get

  postUserTopicPost:
    handler: serve.postUserTopicPost
    events:
      - http:
          path: '/user-details/{id}/topic/{topic}/post/{post}'
          method: post
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:
    UserDetailsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: goald-user-details
        AttributeDefinitions:
          - AttributeName: user-id
            AttributeType: S
        KeySchema:
          - AttributeName: user-id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    UserDetailsTopicTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: goald-user-details-topics
        AttributeDefinitions:
          - AttributeName: topic
            AttributeType: S
          - AttributeName: user-id
            AttributeType: S
        KeySchema:
          - AttributeName: topic
            KeyType: HASH
          - AttributeName: user-id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn:
        - UserDetailsTable
        - UserDetailsTopicTable
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource:
                - arn:aws:dynamodb:*:*:table/goald-user-details
                - arn:aws:dynamodb:*:*:table/goald-user-details-topics
        Roles:
          - Ref: IamRoleLambdaExecution
